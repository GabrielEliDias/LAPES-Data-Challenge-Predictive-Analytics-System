name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
      - '!main'
  pull_request:
    branches:
      - main
  pull_request_target:
    types: [ opened, synchronize, reopened ]

env:
  IMAGE_NAME: lapes-predictive-model

jobs:
  Project-Lapes-ML:
    name: Check Commit Message
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: write

    steps:
      # Extrai o nome da branch
      - name: Extract branch name
        id: extract
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "Verificando branch: $BRANCH_NAME"

      # Valida o padrão da branch
      - name: Validate branch name
        id: validate
        run: |
          BRANCH_NAME="${{ steps.extract.outputs.branch }}"
          echo "Branch name: $BRANCH_NAME"

          if [[ $BRANCH_NAME =~ ^(feature|hotfix|bugfix)\/[A-Z]+-[0-9]+-[a-z0-9-]+$ ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "type=development" >> $GITHUB_OUTPUT
          elif [[ $BRANCH_NAME =~ ^release\/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "type=release" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "type=invalid" >> $GITHUB_OUTPUT
          fi

      # Comenta se o nome da branch for inválido
      - name: Comment branch validation failure
        if: steps.validate.outputs.valid == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const branchName = '${{ steps.extract.outputs.branch }}';
            const comment = `Nome da branch \`${branchName}\` inválido. Use o padrão: feature/ABC-123-descricao`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Branch inválida: ${branchName}`,
              body: comment,
              labels: ['invalid-branch', 'needs-fix']
            });

      # Cancela pipeline se a branch for inválida
      - name: Fail if branch is invalid
        if: steps.validate.outputs.valid == 'false'
        run: |
          echo "Pipeline encerrada. Renomeie a branch de acordo com os padrões."
          exit 1

      # Valida mensagens de commit
      - name: Validate Commit Messages
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: '.commitlintrc.json'
          failOnWarnings: false

      # Gera estatísticas dos commits
      - name: Generate Commit Stats
        id: commit-stats
        run: |
          git log --oneline --no-merges origin/main..HEAD | \
          awk '{if($2~/^feat/) feat++; else if($2~/^fix/) fix++; else other++}
               END {print "feat="feat; print "fix="fix; print "other="other}' >> $GITHUB_OUTPUT

      # Comenta caso haja falha
      - name: Auto Comment on Issues
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const stats = {
              feat: '${{ steps.commit-stats.outputs.feat }}',
              fix: '${{ steps.commit-stats.outputs.fix }}',
              other: '${{ steps.commit-stats.outputs.other }}'
            };

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Validação de commits falhou em: ${context.ref}`,
              body: `Estatísticas: ${stats.feat} feat, ${stats.fix} fix, ${stats.other} outros\n\nUse commits convencionais.`,
              labels: ['invalid-commits']
            });

      # Checkout do código
      - name: Checkout do código
        uses: actions/checkout@v3

      # Configura ambiente Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Instala dependências
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Lint com Flake8
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 src/ --max-line-length=200

      # Build da imagem Docker
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest .

      # Login no Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push para Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      # Criação automática de Pull Request
      - name: Create Pull Request automatically
        if: steps.validate.outputs.valid == 'true' && github.event_name == 'push'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const base = 'main';
            const head = '${{ steps.extract.outputs.branch }}';
            const branchType = '${{ steps.validate.outputs.type }}';
            let title = '';
            let body = '';

            if (branchType === 'development') {
              const parts = head.split('/')[1].split('-');
              const taskId = `${parts[0]}-${parts[1]}`;
              const description = parts.slice(2).join(' ').replace(/-/g, ' ');

              title = `[${taskId}] ${description}`;
              body = `## Descrição\n\nEste PR implementa: ${description}\n\n---\nPR criado automaticamente.`;
            } else if (branchType === 'release') {
              const version = head.split('/')[1];
              title = `Release ${version}`;
              body = `Checklist:\n- [x] Testes validados\n- [x] Build Docker\n\n---\nPR criado automaticamente.`;
            }

            const compare = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base,
              head
            });

            if (compare.status !== 200 || compare.data.total_commits === 0) return;

            const existing = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${head}`,
              state: 'open'
            });

            if (existing.data.length > 0) return;

            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              head,
              base,
              body
            });

            const labels = branchType === 'development' ? ['enhancement'] : ['release'];
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.data.number,
              labels
            });

      # Sucesso
      - name: Notify success
        if: success()
        run: echo "Pipeline concluída com sucesso!"

      # Falhou
      - name: Notify failure
        if: failure()
        run: |
          echo "Pipeline falhou. Verifique os logs."
          exit 1
